// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Project.Infrastructure.Data;

#nullable disable

namespace Project.Infrastructure.Migrations {
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250406161845_init")]
    partial class init {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder) {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Project.Core.Entities.General.Course", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid")
                    .HasColumnName("id");

                b.Property<Guid?>("CategoryId")
                    .HasColumnType("uuid")
                    .HasColumnName("category_id");

                b.Property<DateTime>("CreatedAt")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("created_at")
                    .HasDefaultValueSql("now()");

                b.Property<Guid?>("CreatorId")
                    .HasColumnType("uuid")
                    .HasColumnName("creator_id");

                b.Property<string>("Description")
                    .HasColumnType("text")
                    .HasColumnName("description");

                b.Property<string>("DifficultyLevel")
                    .HasMaxLength(20)
                    .HasColumnType("character varying(20)")
                    .HasColumnName("difficulty_level");

                b.Property<bool>("IsPublished")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("boolean")
                    .HasDefaultValue(false)
                    .HasColumnName("is_published");

                b.Property<Guid?>("LanguageId")
                    .HasColumnType("uuid")
                    .HasColumnName("language_id");

                b.Property<string>("ThumbnailUrl")
                    .HasColumnType("text")
                    .HasColumnName("thumbnail_url");

                b.Property<string>("Title")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("character varying(100)")
                    .HasColumnName("title");

                b.Property<DateTime>("UpdatedAt")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("updated_at")
                    .HasDefaultValueSql("now()");

                b.HasKey("Id")
                    .HasName("courses_pkey");

                b.HasIndex("CategoryId");

                b.HasIndex("CreatorId");

                b.HasIndex(new[] { "LanguageId" }, "idx_course_language");

                b.ToTable("courses", (string)null);
            });

            modelBuilder.Entity("Project.Core.Entities.General.CourseCategory", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid")
                    .HasColumnName("id");

                b.Property<DateTime>("CreatedAt")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("created_at")
                    .HasDefaultValueSql("now()");

                b.Property<string>("Description")
                    .HasColumnType("text")
                    .HasColumnName("description");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("character varying(50)")
                    .HasColumnName("name");

                b.Property<Guid?>("ParentId")
                    .HasColumnType("uuid")
                    .HasColumnName("parent_id");

                b.HasKey("Id")
                    .HasName("course_categories_pkey");

                b.HasIndex("ParentId");

                b.HasIndex(new[] { "Name" }, "course_categories_name_key")
                    .IsUnique();

                b.ToTable("course_categories", (string)null);
            });

            modelBuilder.Entity("Project.Core.Entities.General.CourseReview", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid")
                    .HasColumnName("id");

                b.Property<string>("Comment")
                    .HasColumnType("text")
                    .HasColumnName("comment");

                b.Property<Guid>("CourseId")
                    .HasColumnType("uuid")
                    .HasColumnName("course_id");

                b.Property<DateTime>("CreatedAt")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("created_at")
                    .HasDefaultValueSql("now()");

                b.Property<int>("Rating")
                    .HasColumnType("integer")
                    .HasColumnName("rating");

                b.Property<Guid>("UserId")
                    .HasColumnType("uuid")
                    .HasColumnName("user_id");

                b.HasKey("Id")
                    .HasName("course_reviews_pkey");

                b.HasIndex("CourseId");

                b.HasIndex("UserId");

                b.ToTable("course_reviews", (string)null);
            });

            modelBuilder.Entity("Project.Core.Entities.General.Language", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid")
                    .HasColumnName("id");

                b.Property<string>("Code")
                    .IsRequired()
                    .HasMaxLength(5)
                    .HasColumnType("character varying(5)")
                    .HasColumnName("code");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("timestamp with time zone");

                b.Property<bool>("IsActive")
                    .HasColumnType("boolean");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("character varying(50)")
                    .HasColumnName("name");

                b.Property<string>("Region")
                    .HasMaxLength(50)
                    .HasColumnType("character varying(50)")
                    .HasColumnName("region");

                b.HasKey("Id")
                    .HasName("languages_pkey");

                b.HasIndex(new[] { "Code" }, "languages_code_key")
                    .IsUnique();

                b.ToTable("languages", (string)null);
            });

            modelBuilder.Entity("Project.Core.Entities.General.Lesson", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid")
                    .HasColumnName("id");

                b.Property<string>("Content")
                    .HasColumnType("text")
                    .HasColumnName("content");

                b.Property<DateTime>("CreatedAt")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("created_at")
                    .HasDefaultValueSql("now()");

                b.Property<int?>("DurationMinutes")
                    .HasColumnType("integer")
                    .HasColumnName("duration_minutes");

                b.Property<Guid>("ModuleId")
                    .HasColumnType("uuid")
                    .HasColumnName("module_id");

                b.Property<int>("OrderNumber")
                    .HasColumnType("integer")
                    .HasColumnName("order_number");

                b.Property<string>("Title")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("character varying(100)")
                    .HasColumnName("title");

                b.Property<string>("VideoUrl")
                    .HasColumnType("text")
                    .HasColumnName("video_url");

                b.HasKey("Id")
                    .HasName("lessons_pkey");

                b.HasIndex(new[] { "ModuleId" }, "idx_lessons_module");

                b.ToTable("lessons", (string)null);
            });

            modelBuilder.Entity("Project.Core.Entities.General.Meeting", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid")
                    .HasColumnName("id");

                b.Property<DateTime>("CreatedAt")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("created_at")
                    .HasDefaultValueSql("now()");

                b.Property<string>("Description")
                    .HasColumnType("text")
                    .HasColumnName("description");

                b.Property<DateTime?>("EndTime")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("end_time");

                b.Property<string>("GuestCode")
                    .HasColumnType("text")
                    .HasColumnName("guest_code");

                b.Property<Guid>("HostId")
                    .HasColumnType("uuid")
                    .HasColumnName("host_id");

                b.Property<bool>("IsPrivate")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("boolean")
                    .HasDefaultValue(false)
                    .HasColumnName("is_private");

                b.Property<int>("MaxParticipants")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasDefaultValue(50)
                    .HasColumnName("max_participants");

                b.Property<DateTime>("StartTime")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("start_time");

                b.Property<string>("Status")
                    .ValueGeneratedOnAdd()
                    .HasMaxLength(20)
                    .HasColumnType("character varying(20)")
                    .HasColumnName("status")
                    .HasDefaultValueSql("'scheduled'::character varying");

                b.Property<string>("Title")
                    .HasMaxLength(100)
                    .HasColumnType("character varying(100)")
                    .HasColumnName("title");

                b.HasKey("Id")
                    .HasName("meetings_pkey");

                b.HasIndex(new[] { "HostId" }, "idx_meetings_host");

                b.HasIndex(new[] { "GuestCode" }, "meetings_guest_code_key")
                    .IsUnique();

                b.ToTable("meetings", (string)null);
            });

            modelBuilder.Entity("Project.Core.Entities.General.MeetingParticipant", b =>
            {
                b.Property<Guid>("MeetingId")
                    .HasColumnType("uuid")
                    .HasColumnName("meeting_id");

                b.Property<Guid>("UserId")
                    .HasColumnType("uuid")
                    .HasColumnName("user_id");

                b.Property<string>("DeviceInfo")
                    .HasColumnType("jsonb")
                    .HasColumnName("device_info");

                b.Property<DateTime>("JoinTime")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("join_time")
                    .HasDefaultValueSql("now()");

                b.Property<DateTime?>("LeaveTime")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("leave_time");

                b.HasKey("MeetingId", "UserId")
                    .HasName("meeting_participants_pkey");

                b.HasIndex("UserId");

                b.HasIndex(new[] { "MeetingId", "UserId" }, "idx_meeting_participants");

                b.ToTable("meeting_participants", (string)null);
            });

            modelBuilder.Entity("Project.Core.Entities.General.MeetingRecording", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid")
                    .HasColumnName("id");

                b.Property<DateTime>("CreatedAt")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("created_at")
                    .HasDefaultValueSql("now()");

                b.Property<int?>("Duration")
                    .HasColumnType("integer")
                    .HasColumnName("duration");

                b.Property<Guid>("MeetingId")
                    .HasColumnType("uuid")
                    .HasColumnName("meeting_id");

                b.Property<bool>("Processed")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("boolean")
                    .HasDefaultValue(false)
                    .HasColumnName("processed");

                b.Property<string>("StoragePath")
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("storage_path");

                b.Property<string>("Transcription")
                    .HasColumnType("text")
                    .HasColumnName("transcription");

                b.HasKey("Id")
                    .HasName("meeting_recordings_pkey");

                b.HasIndex("MeetingId");

                b.ToTable("meeting_recordings", (string)null);
            });

            modelBuilder.Entity("Project.Core.Entities.General.Module", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid")
                    .HasColumnName("id");

                b.Property<Guid>("CourseId")
                    .HasColumnType("uuid")
                    .HasColumnName("course_id");

                b.Property<DateTime>("CreatedAt")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("created_at")
                    .HasDefaultValueSql("now()");

                b.Property<string>("Description")
                    .HasColumnType("text")
                    .HasColumnName("description");

                b.Property<int>("OrderNumber")
                    .HasColumnType("integer")
                    .HasColumnName("order_number");

                b.Property<string>("Title")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("character varying(100)")
                    .HasColumnName("title");

                b.HasKey("Id")
                    .HasName("modules_pkey");

                b.HasIndex(new[] { "CourseId" }, "idx_modules_course");

                b.ToTable("modules", (string)null);
            });

            modelBuilder.Entity("Project.Core.Entities.General.Payment", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid")
                    .HasColumnName("id");

                b.Property<decimal>("Amount")
                    .HasPrecision(10, 2)
                    .HasColumnType("numeric(10,2)")
                    .HasColumnName("amount");

                b.Property<DateTime>("CreatedAt")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("created_at")
                    .HasDefaultValueSql("now()");

                b.Property<string>("Currency")
                    .ValueGeneratedOnAdd()
                    .HasMaxLength(3)
                    .HasColumnType("character varying(3)")
                    .HasColumnName("currency")
                    .HasDefaultValueSql("'USD'::character varying");

                b.Property<string>("PaymentMethod")
                    .HasMaxLength(50)
                    .HasColumnType("character varying(50)")
                    .HasColumnName("payment_method");

                b.Property<string>("Status")
                    .ValueGeneratedOnAdd()
                    .HasMaxLength(20)
                    .HasColumnType("character varying(20)")
                    .HasColumnName("status")
                    .HasDefaultValueSql("'pending'::character varying");

                b.Property<Guid?>("SubscriptionId")
                    .HasColumnType("uuid")
                    .HasColumnName("subscription_id");

                b.Property<string>("TransactionId")
                    .HasColumnType("text")
                    .HasColumnName("transaction_id");

                b.Property<Guid?>("UserId")
                    .HasColumnType("uuid")
                    .HasColumnName("user_id");

                b.HasKey("Id")
                    .HasName("payments_pkey");

                b.HasIndex("SubscriptionId");

                b.HasIndex("UserId");

                b.HasIndex(new[] { "TransactionId" }, "payments_transaction_id_key")
                    .IsUnique();

                b.ToTable("payments", (string)null);
            });

            modelBuilder.Entity("Project.Core.Entities.General.Profile", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid")
                    .HasColumnName("id");

                b.Property<string>("AvatarUrl")
                    .HasColumnType("text")
                    .HasColumnName("avatar_url");

                b.Property<DateTime>("CreatedAt")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("created_at")
                    .HasDefaultValueSql("now()");

                b.Property<string>("Email")
                    .HasMaxLength(255)
                    .HasColumnType("character varying(255)")
                    .HasColumnName("email");

                b.Property<Guid?>("PreferredLanguageId")
                    .HasColumnType("uuid")
                    .HasColumnName("preferred_language");

                b.Property<Guid?>("RoleId")
                    .HasColumnType("uuid")
                    .HasColumnName("role_id");

                b.Property<DateTime>("UpdatedAt")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("updated_at")
                    .HasDefaultValueSql("now()");

                b.Property<string>("Username")
                    .HasMaxLength(50)
                    .HasColumnType("character varying(50)")
                    .HasColumnName("username");

                b.HasKey("Id")
                    .HasName("profiles_pkey");

                b.HasIndex("PreferredLanguageId");

                b.HasIndex("RoleId");

                b.HasIndex(new[] { "Username" }, "profiles_username_key")
                    .IsUnique();

                b.ToTable("profiles", (string)null);
            });

            modelBuilder.Entity("Project.Core.Entities.General.Quiz", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid")
                    .HasColumnName("id");

                b.Property<string>("CorrectAnswer")
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("correct_answer");

                b.Property<DateTime>("CreatedAt")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("created_at")
                    .HasDefaultValueSql("now()");

                b.Property<string>("Explanation")
                    .HasColumnType("text")
                    .HasColumnName("explanation");

                b.Property<Guid>("LessonId")
                    .HasColumnType("uuid")
                    .HasColumnName("lesson_id");

                b.Property<int>("MaxScore")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasDefaultValue(10)
                    .HasColumnName("max_score");

                b.Property<string>("Options")
                    .HasColumnType("jsonb")
                    .HasColumnName("options");

                b.Property<string>("Question")
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("question");

                b.HasKey("Id")
                    .HasName("quizzes_pkey");

                b.HasIndex("LessonId");

                b.ToTable("quizzes", (string)null);
            });

            modelBuilder.Entity("Project.Core.Entities.General.QuizAttempt", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid")
                    .HasColumnName("id");

                b.Property<DateTime>("CompletedAt")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("completed_at")
                    .HasDefaultValueSql("now()");

                b.Property<Guid>("QuizId")
                    .HasColumnType("uuid")
                    .HasColumnName("quiz_id");

                b.Property<int>("Score")
                    .HasColumnType("integer")
                    .HasColumnName("score");

                b.Property<string>("SelectedAnswer")
                    .HasColumnType("text")
                    .HasColumnName("selected_answer");

                b.Property<Guid>("UserId")
                    .HasColumnType("uuid")
                    .HasColumnName("user_id");

                b.HasKey("Id")
                    .HasName("quiz_attempts_pkey");

                b.HasIndex("QuizId");

                b.HasIndex("UserId");

                b.ToTable("quiz_attempts", (string)null);
            });

            modelBuilder.Entity("Project.Core.Entities.General.Role", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid")
                    .HasColumnName("id");

                b.Property<DateTime>("CreatedAt")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("created_at")
                    .HasDefaultValueSql("now()");

                b.Property<string>("Description")
                    .HasColumnType("text")
                    .HasColumnName("description");

                b.Property<bool>("IsActive")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("boolean")
                    .HasDefaultValue(true)
                    .HasColumnName("is_active");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("character varying(50)")
                    .HasColumnName("name");

                b.HasKey("Id")
                    .HasName("roles_pkey");

                b.HasIndex(new[] { "Name" }, "roles_name_key")
                    .IsUnique();

                b.ToTable("roles", (string)null);
            });

            modelBuilder.Entity("Project.Core.Entities.General.SubscriptionPlan", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid")
                    .HasColumnName("id");

                b.Property<int>("DurationDays")
                    .HasColumnType("integer")
                    .HasColumnName("duration_days");

                b.Property<string>("Features")
                    .HasColumnType("jsonb")
                    .HasColumnName("features");

                b.Property<bool>("IsActive")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("boolean")
                    .HasDefaultValue(true)
                    .HasColumnName("is_active");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("character varying(50)")
                    .HasColumnName("name");

                b.Property<decimal>("Price")
                    .HasPrecision(10, 2)
                    .HasColumnType("numeric(10,2)")
                    .HasColumnName("price");

                b.HasKey("Id")
                    .HasName("subscription_plans_pkey");

                b.HasIndex(new[] { "Name" }, "subscription_plans_name_key")
                    .IsUnique();

                b.ToTable("subscription_plans", (string)null);
            });

            modelBuilder.Entity("Project.Core.Entities.General.Translation", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint")
                    .HasColumnName("id");

                NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                b.Property<float?>("Confidence")
                    .HasColumnType("real")
                    .HasColumnName("confidence");

                b.Property<DateTime>("CreatedAt")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("created_at")
                    .HasDefaultValueSql("now()");

                b.Property<bool>("IsCorrected")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("boolean")
                    .HasDefaultValue(false)
                    .HasColumnName("is_corrected");

                b.Property<Guid?>("MeetingId")
                    .HasColumnType("uuid")
                    .HasColumnName("meeting_id");

                b.Property<string>("OriginalText")
                    .HasColumnType("text")
                    .HasColumnName("original_text");

                b.Property<Guid?>("SourceLanguageId")
                    .HasColumnType("uuid")
                    .HasColumnName("source_language");

                b.Property<Guid?>("TargetLanguageId")
                    .HasColumnType("uuid")
                    .HasColumnName("target_language");

                b.Property<string>("TranslatedText")
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("translated_text");

                b.Property<Guid?>("UserId")
                    .HasColumnType("uuid")
                    .HasColumnName("user_id");

                b.HasKey("Id")
                    .HasName("translations_pkey");

                b.HasIndex("SourceLanguageId");

                b.HasIndex("TargetLanguageId");

                b.HasIndex("UserId");

                b.HasIndex(new[] { "MeetingId" }, "idx_translations_meeting");

                b.ToTable("translations", (string)null);
            });

            modelBuilder.Entity("Project.Core.Entities.General.UserCourseProgress", b =>
            {
                b.Property<Guid>("UserId")
                    .HasColumnType("uuid")
                    .HasColumnName("user_id");

                b.Property<Guid>("LessonId")
                    .HasColumnType("uuid")
                    .HasColumnName("lesson_id");

                b.Property<DateTime>("CompletedAt")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("completed_at")
                    .HasDefaultValueSql("now()");

                b.HasKey("UserId", "LessonId")
                    .HasName("user_course_progress_pkey");

                b.HasIndex("LessonId");

                b.ToTable("user_course_progress", (string)null);
            });

            modelBuilder.Entity("Project.Core.Entities.General.UserSubscription", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid")
                    .HasColumnName("id");

                b.Property<DateTime>("CreatedAt")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("created_at")
                    .HasDefaultValueSql("now()");

                b.Property<DateTime>("EndDate")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("end_date");

                b.Property<Guid>("PlanId")
                    .HasColumnType("uuid")
                    .HasColumnName("plan_id");

                b.Property<DateTime>("StartDate")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("start_date");

                b.Property<string>("Status")
                    .HasMaxLength(20)
                    .HasColumnType("character varying(20)")
                    .HasColumnName("status");

                b.Property<Guid>("UserId")
                    .HasColumnType("uuid")
                    .HasColumnName("user_id");

                b.HasKey("Id")
                    .HasName("user_subscriptions_pkey");

                b.HasIndex("PlanId");

                b.HasIndex("UserId");

                b.ToTable("user_subscriptions", (string)null);
            });

            modelBuilder.Entity("Project.Core.Entities.General.Course", b =>
            {
                b.HasOne("Project.Core.Entities.General.CourseCategory", "Category")
                    .WithMany("Courses")
                    .HasForeignKey("CategoryId")
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("courses_category_id_fkey");

                b.HasOne("Project.Core.Entities.General.Profile", "Creator")
                    .WithMany("CreatedCourses")
                    .HasForeignKey("CreatorId")
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("courses_creator_id_fkey");

                b.HasOne("Project.Core.Entities.General.Language", "Language")
                    .WithMany("Courses")
                    .HasForeignKey("LanguageId")
                    .HasConstraintName("courses_language_id_fkey");

                b.Navigation("Category");

                b.Navigation("Creator");

                b.Navigation("Language");
            });

            modelBuilder.Entity("Project.Core.Entities.General.CourseCategory", b =>
            {
                b.HasOne("Project.Core.Entities.General.CourseCategory", "Parent")
                    .WithMany("Subcategories")
                    .HasForeignKey("ParentId")
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("course_categories_parent_id_fkey");

                b.Navigation("Parent");
            });

            modelBuilder.Entity("Project.Core.Entities.General.CourseReview", b =>
            {
                b.HasOne("Project.Core.Entities.General.Course", "Course")
                    .WithMany("Reviews")
                    .HasForeignKey("CourseId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired()
                    .HasConstraintName("course_reviews_course_id_fkey");

                b.HasOne("Project.Core.Entities.General.Profile", "User")
                    .WithMany("CourseReviews")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired()
                    .HasConstraintName("course_reviews_user_id_fkey");

                b.Navigation("Course");

                b.Navigation("User");
            });

            modelBuilder.Entity("Project.Core.Entities.General.Lesson", b =>
            {
                b.HasOne("Project.Core.Entities.General.Module", "Module")
                    .WithMany("Lessons")
                    .HasForeignKey("ModuleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired()
                    .HasConstraintName("lessons_module_id_fkey");

                b.Navigation("Module");
            });

            modelBuilder.Entity("Project.Core.Entities.General.Meeting", b =>
            {
                b.HasOne("Project.Core.Entities.General.Profile", "Host")
                    .WithMany("HostedMeetings")
                    .HasForeignKey("HostId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired()
                    .HasConstraintName("meetings_host_id_fkey");

                b.Navigation("Host");
            });

            modelBuilder.Entity("Project.Core.Entities.General.MeetingParticipant", b =>
            {
                b.HasOne("Project.Core.Entities.General.Meeting", "Meeting")
                    .WithMany("Participants")
                    .HasForeignKey("MeetingId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired()
                    .HasConstraintName("meeting_participants_meeting_id_fkey");

                b.HasOne("Project.Core.Entities.General.Profile", "User")
                    .WithMany("MeetingParticipations")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired()
                    .HasConstraintName("meeting_participants_user_id_fkey");

                b.Navigation("Meeting");

                b.Navigation("User");
            });

            modelBuilder.Entity("Project.Core.Entities.General.MeetingRecording", b =>
            {
                b.HasOne("Project.Core.Entities.General.Meeting", "Meeting")
                    .WithMany("Recordings")
                    .HasForeignKey("MeetingId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired()
                    .HasConstraintName("meeting_recordings_meeting_id_fkey");

                b.Navigation("Meeting");
            });

            modelBuilder.Entity("Project.Core.Entities.General.Module", b =>
            {
                b.HasOne("Project.Core.Entities.General.Course", "Course")
                    .WithMany("Modules")
                    .HasForeignKey("CourseId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired()
                    .HasConstraintName("modules_course_id_fkey");

                b.Navigation("Course");
            });

            modelBuilder.Entity("Project.Core.Entities.General.Payment", b =>
            {
                b.HasOne("Project.Core.Entities.General.UserSubscription", "Subscription")
                    .WithMany("Payments")
                    .HasForeignKey("SubscriptionId")
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("payments_subscription_id_fkey");

                b.HasOne("Project.Core.Entities.General.Profile", "User")
                    .WithMany("Payments")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("payments_user_id_fkey");

                b.Navigation("Subscription");

                b.Navigation("User");
            });

            modelBuilder.Entity("Project.Core.Entities.General.Profile", b =>
            {
                b.HasOne("Project.Core.Entities.General.Language", "PreferredLanguage")
                    .WithMany("Profiles")
                    .HasForeignKey("PreferredLanguageId")
                    .HasConstraintName("profiles_preferred_language_fkey");

                b.HasOne("Project.Core.Entities.General.Role", "Role")
                    .WithMany("Profiles")
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("profiles_role_id_fkey");

                b.Navigation("PreferredLanguage");

                b.Navigation("Role");
            });

            modelBuilder.Entity("Project.Core.Entities.General.Quiz", b =>
            {
                b.HasOne("Project.Core.Entities.General.Lesson", "Lesson")
                    .WithMany("Quizzes")
                    .HasForeignKey("LessonId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired()
                    .HasConstraintName("quizzes_lesson_id_fkey");

                b.Navigation("Lesson");
            });

            modelBuilder.Entity("Project.Core.Entities.General.QuizAttempt", b =>
            {
                b.HasOne("Project.Core.Entities.General.Quiz", "Quiz")
                    .WithMany("Attempts")
                    .HasForeignKey("QuizId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired()
                    .HasConstraintName("quiz_attempts_quiz_id_fkey");

                b.HasOne("Project.Core.Entities.General.Profile", "User")
                    .WithMany("QuizAttempts")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired()
                    .HasConstraintName("quiz_attempts_user_id_fkey");

                b.Navigation("Quiz");

                b.Navigation("User");
            });

            modelBuilder.Entity("Project.Core.Entities.General.Translation", b =>
            {
                b.HasOne("Project.Core.Entities.General.Meeting", "Meeting")
                    .WithMany("Translations")
                    .HasForeignKey("MeetingId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("translations_meeting_id_fkey");

                b.HasOne("Project.Core.Entities.General.Language", "SourceLanguage")
                    .WithMany("SourceTranslations")
                    .HasForeignKey("SourceLanguageId")
                    .HasConstraintName("translations_source_language_fkey");

                b.HasOne("Project.Core.Entities.General.Language", "TargetLanguage")
                    .WithMany("TargetTranslations")
                    .HasForeignKey("TargetLanguageId")
                    .HasConstraintName("translations_target_language_fkey");

                b.HasOne("Project.Core.Entities.General.Profile", "User")
                    .WithMany("Translations")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("translations_user_id_fkey");

                b.Navigation("Meeting");

                b.Navigation("SourceLanguage");

                b.Navigation("TargetLanguage");

                b.Navigation("User");
            });

            modelBuilder.Entity("Project.Core.Entities.General.UserCourseProgress", b =>
            {
                b.HasOne("Project.Core.Entities.General.Lesson", "Lesson")
                    .WithMany("UserProgresses")
                    .HasForeignKey("LessonId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired()
                    .HasConstraintName("user_course_progress_lesson_id_fkey");

                b.HasOne("Project.Core.Entities.General.Profile", "User")
                    .WithMany("CourseProgresses")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired()
                    .HasConstraintName("user_course_progress_user_id_fkey");

                b.Navigation("Lesson");

                b.Navigation("User");
            });

            modelBuilder.Entity("Project.Core.Entities.General.UserSubscription", b =>
            {
                b.HasOne("Project.Core.Entities.General.SubscriptionPlan", "Plan")
                    .WithMany("UserSubscriptions")
                    .HasForeignKey("PlanId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired()
                    .HasConstraintName("user_subscriptions_plan_id_fkey");

                b.HasOne("Project.Core.Entities.General.Profile", "User")
                    .WithMany("UserSubscriptions")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired()
                    .HasConstraintName("user_subscriptions_user_id_fkey");

                b.Navigation("Plan");

                b.Navigation("User");
            });

            modelBuilder.Entity("Project.Core.Entities.General.Course", b =>
            {
                b.Navigation("Modules");

                b.Navigation("Reviews");
            });

            modelBuilder.Entity("Project.Core.Entities.General.CourseCategory", b =>
            {
                b.Navigation("Courses");

                b.Navigation("Subcategories");
            });

            modelBuilder.Entity("Project.Core.Entities.General.Language", b =>
            {
                b.Navigation("Courses");

                b.Navigation("Profiles");

                b.Navigation("SourceTranslations");

                b.Navigation("TargetTranslations");
            });

            modelBuilder.Entity("Project.Core.Entities.General.Lesson", b =>
            {
                b.Navigation("Quizzes");

                b.Navigation("UserProgresses");
            });

            modelBuilder.Entity("Project.Core.Entities.General.Meeting", b =>
            {
                b.Navigation("Participants");

                b.Navigation("Recordings");

                b.Navigation("Translations");
            });

            modelBuilder.Entity("Project.Core.Entities.General.Module", b =>
            {
                b.Navigation("Lessons");
            });

            modelBuilder.Entity("Project.Core.Entities.General.Profile", b =>
            {
                b.Navigation("CourseProgresses");

                b.Navigation("CourseReviews");

                b.Navigation("CreatedCourses");

                b.Navigation("HostedMeetings");

                b.Navigation("MeetingParticipations");

                b.Navigation("Payments");

                b.Navigation("QuizAttempts");

                b.Navigation("Translations");

                b.Navigation("UserSubscriptions");
            });

            modelBuilder.Entity("Project.Core.Entities.General.Quiz", b =>
            {
                b.Navigation("Attempts");
            });

            modelBuilder.Entity("Project.Core.Entities.General.Role", b =>
            {
                b.Navigation("Profiles");
            });

            modelBuilder.Entity("Project.Core.Entities.General.SubscriptionPlan", b =>
            {
                b.Navigation("UserSubscriptions");
            });

            modelBuilder.Entity("Project.Core.Entities.General.UserSubscription", b =>
            {
                b.Navigation("Payments");
            });
#pragma warning restore 612, 618
        }
    }
}
